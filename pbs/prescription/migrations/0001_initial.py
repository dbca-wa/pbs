# Generated by Django 3.2.25 on 2024-08-23 01:35

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
from django.utils.timezone import utc
import smart_selects.db_fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Approval',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('initial_valid_to', models.DateField(default=datetime.datetime(2025, 8, 23, 1, 35, 14, 439960, tzinfo=utc), editable=False, verbose_name='Valid To (Initial)')),
                ('valid_to', models.DateField(verbose_name='Valid To')),
                ('extension_count', models.PositiveSmallIntegerField(default=0, editable=False, validators=[django.core.validators.MaxValueValidator(3)], verbose_name='Extension Count')),
            ],
            options={
                'ordering': ['-id'],
                'get_latest_by': 'valid_to',
            },
        ),
        migrations.CreateModel(
            name='BriefingChecklist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('title', models.TextField(verbose_name='Topic')),
                ('notes', models.TextField(blank=True, verbose_name='Briefing Notes')),
            ],
            options={
                'verbose_name': 'Checklist Item',
                'verbose_name_plural': 'Checklist Items',
                'ordering': ['smeac__id', 'id'],
            },
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('code', models.CharField(max_length=3)),
                ('archive_date', models.DateField(blank=True, help_text='Archive this District (prevent from creating new ePFPs)', null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='EndorsingRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=320)),
                ('index', models.PositiveSmallIntegerField()),
                ('disclaimer', models.TextField()),
                ('archived', models.BooleanField(default=False, verbose_name='Role archived?')),
            ],
            options={
                'ordering': ['index'],
            },
        ),
        migrations.CreateModel(
            name='ForecastArea',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('districts', models.ManyToManyField(to='prescription.District')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='FuelType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Objective',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('objectives', models.TextField(help_text='Prescription Objectives')),
                ('creator', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='prescription_objective_created', to=settings.AUTH_USER_MODEL)),
                ('modifier', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='prescription_objective_modified', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Burn Objective',
                'verbose_name_plural': 'Burn Objectives',
                'ordering': ['created'],
            },
        ),
        migrations.CreateModel(
            name='Prescription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('burn_id', models.CharField(max_length=7, verbose_name='Burn ID')),
                ('name', models.CharField(max_length=128)),
                ('description', models.TextField(blank=True, null=True)),
                ('planned_year', models.PositiveIntegerField(blank=True, max_length=4, verbose_name='Planned Year')),
                ('financial_year', models.CharField(default='2024/2025', max_length=10, verbose_name='Financial Year')),
                ('planned_season', models.PositiveSmallIntegerField(blank=True, default=8, max_length=64, null=True, verbose_name='Planned Season')),
                ('last_year', models.CharField(blank=True, max_length=64, null=True, verbose_name='Year Last Burnt')),
                ('last_season', models.CharField(blank=True, max_length=64, null=True, verbose_name='Season Last Burnt')),
                ('last_season_unknown', models.BooleanField(default=False, verbose_name='Last Season Unknown?')),
                ('last_year_unknown', models.BooleanField(default=False, verbose_name='Last Year Unknown?')),
                ('contentious', models.NullBooleanField(choices=[(None, '-----'), (False, 'No'), (True, 'Yes')], default=None, help_text='Is this burn contentious?')),
                ('contentious_rationale', models.TextField(blank=True, help_text='If this burn is contentious, a short explanation of why', null=True, verbose_name='Rationale')),
                ('aircraft_burn', models.BooleanField(default=False, help_text='Does this burn involve aerial ignition?', verbose_name='Aircraft Burn?')),
                ('priority', models.PositiveSmallIntegerField(choices=[(0, 'Unset'), (1, '1'), (2, '2'), (3, '3')], default=0, help_text='Priority for this burn', verbose_name='Overall Priority')),
                ('rationale', models.TextField(blank=True, null=True, verbose_name='Overall Rationale')),
                ('remote_sensing_priority', models.PositiveSmallIntegerField(choices=[(3, 'High'), (2, 'Medium'), (1, 'Low'), (4, 'Not Applicable')], default=4, help_text='Remote sensing priority', verbose_name='Remote Sensing Priority')),
                ('treatment_percentage', models.PositiveSmallIntegerField(blank=True, help_text='Percentage of the planned area that will be treated (%)', null=True, validators=[django.core.validators.MaxValueValidator(100)])),
                ('location', models.CharField(blank=True, help_text='Example: Nollajup Nature Reserve - 8.5 KM S of Boyup Brook', max_length=320, null=True)),
                ('area', models.DecimalField(decimal_places=1, default=0.0, help_text='Planned burn area (in ha)', max_digits=12, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Planned Burn Area')),
                ('perimeter', models.DecimalField(decimal_places=1, default=0.0, help_text='Planned burn perimeter (in km)', max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('bushfire_act_zone', models.TextField(null=True, verbose_name='Bushfires Act Zone')),
                ('prohibited_period', models.TextField(blank=True, null=True, verbose_name='Prohibited Period')),
                ('short_code', models.TextField(blank=True, null=True, verbose_name='Short Code')),
                ('planning_status', models.PositiveSmallIntegerField(choices=[(1, 'Draft'), (2, 'Seeking Corporate Approval'), (3, 'Corporate Approved')], default=1, verbose_name='Planning Status')),
                ('planning_status_modified', models.DateTimeField(editable=False, null=True, verbose_name='Planning Status Modified')),
                ('endorsing_roles_determined', models.BooleanField(default=False, verbose_name='Required Endorsing Roles')),
                ('endorsement_status', models.PositiveSmallIntegerField(choices=[(1, 'Not Endorsed'), (2, 'Seeking Endorsement'), (3, 'Endorsed')], default=1, verbose_name='Endorsement Status')),
                ('endorsement_status_modified', models.DateTimeField(editable=False, null=True, verbose_name='Endorsement Status Modified')),
                ('approval_status', models.PositiveSmallIntegerField(choices=[(1, 'Not Approved'), (2, 'Seeking Approval'), (3, 'Approved')], default=1, verbose_name='Approval Status')),
                ('approval_status_modified', models.DateTimeField(editable=False, null=True, verbose_name='Approval Status Modified')),
                ('ignition_status', models.PositiveSmallIntegerField(choices=[(1, 'No Ignitions'), (2, 'Ignition Commenced'), (3, 'Ignition Completed')], default=1, verbose_name='Ignition Status')),
                ('ignition_status_modified', models.DateTimeField(editable=False, null=True, verbose_name='Ignition Status Modified')),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Burn Open'), (2, 'Burn Closed')], default=1)),
                ('status_modified', models.DateTimeField(editable=False, null=True, verbose_name='Status Modified')),
                ('ignition_completed_date', models.DateField(blank=True, null=True, verbose_name='Ignition Completed')),
                ('forest_blocks', models.TextField(blank=True, verbose_name='Forest Blocks (if applicable)')),
                ('carried_over', models.BooleanField(default=False, editable=False)),
                ('contingencies_migrated', models.BooleanField(default=False, editable=False)),
                ('non_calm_tenure', models.NullBooleanField(verbose_name='Non-CALM Act Tenure')),
                ('non_calm_tenure_approved', models.NullBooleanField(verbose_name='Cross Tenure Approved?')),
                ('non_calm_tenure_included', models.TextField(blank=True, null=True, verbose_name='Non-CALM Act Tenure Included')),
                ('non_calm_tenure_value', models.TextField(blank=True, null=True, verbose_name='Public Value in Burn')),
                ('non_calm_tenure_complete', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Yes'), (2, 'No'), (3, 'Yes and No')], null=True, verbose_name='Can the burn be completed safely without the inclusion of other tenure?')),
                ('non_calm_tenure_risks', models.TextField(blank=True, null=True, verbose_name='Risks based issues if other tenure not included')),
                ('closure_officer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='closure', to=settings.AUTH_USER_MODEL, verbose_name='Closure Officer')),
                ('creator', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='prescription_prescription_created', to=settings.AUTH_USER_MODEL)),
                ('district', smart_selects.db_fields.ChainedForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='prescription.district')),
                ('endorsing_roles', models.ManyToManyField(to='prescription.EndorsingRole', verbose_name='Endorsing Roles')),
                ('forecast_areas', models.ManyToManyField(blank=True, null=True, to='prescription.ForecastArea', verbose_name='Forecast Areas')),
                ('fuel_types', models.ManyToManyField(blank=True, null=True, to='prescription.FuelType', verbose_name='Fuel Types')),
                ('modifier', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='prescription_prescription_modified', to=settings.AUTH_USER_MODEL)),
                ('prescribing_officer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Prescribing Officer')),
            ],
            options={
                'verbose_name': 'Prescribed Fire Plan',
                'verbose_name_plural': 'Prescribed Fire Plans',
                'permissions': (('can_corporate_approve', 'Can apply corporate approval'), ('can_delete_approval', 'Can remove ePFP approval'), ('can_carry_over', 'Can carry over burns'), ('can_admin', 'Can admin burns')),
            },
        ),
        migrations.CreateModel(
            name='Purpose',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('display_order', models.PositiveIntegerField(default=1)),
            ],
            options={
                'ordering': ['display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='SMEAC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Tenure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SuccessCriteria',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('criteria', models.TextField(verbose_name='Success Criteria')),
                ('creator', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='prescription_successcriteria_created', to=settings.AUTH_USER_MODEL)),
                ('modifier', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='prescription_successcriteria_modified', to=settings.AUTH_USER_MODEL)),
                ('objectives', models.ManyToManyField(to='prescription.Objective')),
                ('prescription', models.ForeignKey(help_text='Prescription this success criteria belongs to', on_delete=django.db.models.deletion.PROTECT, to='prescription.prescription')),
            ],
            options={
                'verbose_name': 'Success Criteria',
                'verbose_name_plural': 'Success Criterias',
                'ordering': ['created'],
            },
        ),
        migrations.CreateModel(
            name='Shire',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='prescription.district')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.PositiveSmallIntegerField(choices=[(8, 'Annual')], default=8)),
                ('start', models.DateField(help_text='Start date of season')),
                ('end', models.DateField(help_text='End date of season')),
                ('creator', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='prescription_season_created', to=settings.AUTH_USER_MODEL)),
                ('modifier', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='prescription_season_modified', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-start'],
            },
        ),
        migrations.CreateModel(
            name='RegionalObjective',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('impact', models.PositiveSmallIntegerField(choices=[(1, 'Region'), (2, 'Fire Management Area')], default=1, help_text='Area of application for objective', verbose_name='scale of application')),
                ('fma_names', models.TextField(blank=True, help_text='If the impact of this objective is Fire Management Area, enter the names of the areas of application here', verbose_name='Fire Management Areas')),
                ('objectives', models.TextField()),
                ('creator', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='prescription_regionalobjective_created', to=settings.AUTH_USER_MODEL)),
                ('modifier', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='prescription_regionalobjective_modified', to=settings.AUTH_USER_MODEL)),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='prescription.region')),
            ],
            options={
                'verbose_name': 'Regional Fire Management Plan Objective',
                'verbose_name_plural': 'Regional Fire Management Plan Objectives',
            },
        ),
        migrations.CreateModel(
            name='PriorityJustification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('order', models.PositiveSmallIntegerField(default=0)),
                ('criteria', models.TextField(blank=True, verbose_name='Prioritisation Criteria')),
                ('rationale', models.TextField(blank=True)),
                ('priority', models.PositiveSmallIntegerField(choices=[(0, 'Unrated'), (1, '1'), (2, '2'), (3, '3')], default=0)),
                ('relevant', models.BooleanField(default=False)),
                ('creator', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='prescription_priorityjustification_created', to=settings.AUTH_USER_MODEL)),
                ('modifier', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='prescription_priorityjustification_modified', to=settings.AUTH_USER_MODEL)),
                ('prescription', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='prescription.prescription')),
                ('purpose', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='prescription.purpose', verbose_name='Burn Purpose')),
            ],
            options={
                'verbose_name': 'Burn Priority Justification',
                'verbose_name_plural': 'Burn Priority Justifications',
                'ordering': ['order'],
            },
        ),
        migrations.AddField(
            model_name='prescription',
            name='purposes',
            field=models.ManyToManyField(to='prescription.Purpose'),
        ),
        migrations.AddField(
            model_name='prescription',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='prescription.region'),
        ),
        migrations.AddField(
            model_name='prescription',
            name='regional_objectives',
            field=models.ManyToManyField(blank=True, help_text='Regional Objectives', null=True, to='prescription.RegionalObjective', verbose_name='Regional Objectives'),
        ),
        migrations.AddField(
            model_name='prescription',
            name='shires',
            field=models.ManyToManyField(blank=True, null=True, to='prescription.Shire'),
        ),
        migrations.AddField(
            model_name='prescription',
            name='tenures',
            field=models.ManyToManyField(blank=True, to='prescription.Tenure'),
        ),
        migrations.AddField(
            model_name='objective',
            name='prescription',
            field=models.ForeignKey(help_text='Prescription this objective belongs to', on_delete=django.db.models.deletion.PROTECT, to='prescription.prescription'),
        ),
        migrations.CreateModel(
            name='FundingAllocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allocation', models.PositiveSmallIntegerField(choices=[(42, '42 - Native forest'), (43, '43 - Plantations'), (72, '72 - Prescribed fire'), (7204, '72-04 - Recoupable projects')], help_text='Program funding code which is assigned to the burn', max_length=64, verbose_name='Program')),
                ('proportion', models.DecimalField(decimal_places=2, default=0, help_text='Percentage between 0 and 100', max_digits=5, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)], verbose_name='Proportion of budget covered [%]')),
                ('prescription', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='prescription.prescription')),
            ],
        ),
        migrations.CreateModel(
            name='Endorsement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('endorsed', models.NullBooleanField(choices=[(None, ''), (False, 'Reviewed and not endorsed'), (True, 'Endorsed')], default=None)),
                ('creator', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='prescription_endorsement_created', to=settings.AUTH_USER_MODEL)),
                ('modifier', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='prescription_endorsement_modified', to=settings.AUTH_USER_MODEL)),
                ('prescription', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='prescription.prescription')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='prescription.endorsingrole')),
            ],
            options={
                'ordering': ['role'],
            },
        ),
        migrations.AddField(
            model_name='district',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='prescription.region'),
        ),
        migrations.CreateModel(
            name='DefaultBriefingChecklist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('smeac', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='prescription.smeac', verbose_name='SMEACS')),
            ],
        ),
    ]
